{"version":3,"sources":["TrafficLights/TrafficLightsMachine.ts","TrafficLights/TrafficLights.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["trafficLightMachine","createMachine","id","initial","states","on","GreenRadio","withStyles","root","color","green","checked","props","Radio","YellowRadio","yellow","RedRadio","red","useStyles","makeStyles","theme","createStyles","flexGrow","trafficSignal","display","flexDirection","width","margin","backgroundColor","borderRadius","height","btnNext","marginTop","paper","control","padding","spacing","TrafficLights","classes","useMachine","current","send","Grid","container","className","item","xs","md","justify","disabled","name","inputProps","matches","size","Button","variant","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef879113.chunk.js","sourcesContent":["import { createMachine } from \"xstate\";\r\n\r\ntype TrafficLightEvents = {\r\n    type: 'NEXT'\r\n}\r\n\r\ntype TrafficLightStates =\r\n    | { value: 'red', context: undefined }\r\n    | { value: 'yellow', context: undefined }\r\n    | { value: 'green', context: undefined }\r\n\r\nexport const trafficLightMachine = createMachine<\r\n    undefined,\r\n    TrafficLightEvents,\r\n    TrafficLightStates>({\r\n        id: 'traffic-light',\r\n        initial: 'red',\r\n        states: {\r\n            'green': {\r\n                on: { 'NEXT': 'yellow' }\r\n            },\r\n            'yellow': {\r\n                on: { 'NEXT': 'red' }\r\n            },\r\n            'red': {\r\n                on: { 'NEXT': 'green' }\r\n            },\r\n        }\r\n    });","import React, { FC, Fragment, useState } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Radio, { RadioProps } from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid, { GridSpacing } from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green, yellow, red } from '@material-ui/core/colors';\r\nimport Button from '@material-ui/core/Button';\r\nimport { trafficLightMachine } from './TrafficLightsMachine';\r\nimport { useMachine } from '@xstate/react';\r\n\r\nexport interface IProps {\r\n\r\n}\r\n\r\nconst GreenRadio = withStyles({\r\n    root: {\r\n        color: green[400],\r\n        '&$checked': {\r\n            color: green[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\nconst YellowRadio = withStyles({\r\n    root: {\r\n        color: yellow[400],\r\n        '&$checked': {\r\n            color: yellow[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\nconst RedRadio = withStyles({\r\n    root: {\r\n        color: red[400],\r\n        '&$checked': {\r\n            color: red[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props: RadioProps) => <Radio color=\"default\" {...props} />);\r\n\r\nconst TrafficLights: FC<IProps> = (props: IProps) => {\r\n    const classes = useStyles();\r\n    const [current, send] = useMachine(trafficLightMachine);\r\n    return (\r\n        <Grid container className={classes.root} spacing={2}>\r\n            <Grid item xs={false} md={4} />\r\n            <Grid item xs={12} md={4} justify=\"center\">\r\n                <Grid item>\r\n                    <Grid item xs={12} className={classes.trafficSignal}>\r\n                        <RedRadio\r\n                            disabled\r\n                            name=\"red\"\r\n                            inputProps={{ 'aria-label': 'red' }}\r\n                            checked={current.matches('red')}\r\n                            size=\"medium\"\r\n                        />\r\n                        <YellowRadio\r\n                            disabled\r\n                            name=\"yellow\"\r\n                            inputProps={{ 'aria-label': 'yellow' }}\r\n                            checked={current.matches('yellow')}\r\n                        />\r\n                        <GreenRadio\r\n                            name=\"green\"\r\n                            disabled\r\n                            inputProps={{ 'aria-label': 'green' }}\r\n                            checked={current.matches('green')}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} className={classes.btnNext}>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => send('NEXT')}>\r\n                            NEXT\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid item xs={false} md={4} />\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        trafficSignal: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            width: 80,\r\n            margin: '0 auto',\r\n            backgroundColor: '#6a6a6a',\r\n            borderRadius: 25,\r\n            \"& .MuiSvgIcon-root\": {\r\n                height: 50,\r\n                width: 50,\r\n            }\r\n        },\r\n        btnNext: {\r\n            marginTop: 15,\r\n        },\r\n        paper: {\r\n            height: 140,\r\n            width: 100,\r\n        },\r\n        control: {\r\n            padding: theme.spacing(2),\r\n        },\r\n    }),\r\n);\r\n\r\nexport default TrafficLights;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TrafficLights from './TrafficLights/TrafficLights';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TrafficLights />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}